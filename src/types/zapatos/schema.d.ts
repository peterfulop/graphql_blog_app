/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2022 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: public === */

  /* --- enums --- */
  /* (none) */

  /* --- tables --- */

  /**
   * **post**
   * - Table in database
   */
  export namespace post {
    export type Table = 'post';
    export interface Selectable {
      /**
      * **post.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **post.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **post.content**
      * - `text` in database
      * - Nullable, no default
      */
      content: string | null;
      /**
      * **post.publisched**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      publisched: boolean;
      /**
      * **post.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      createdAt: Date;
      /**
      * **post.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updatedAt: Date;
      /**
      * **post.authorId**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      authorId: string;
    }
    export interface JSONSelectable {
      /**
      * **post.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **post.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **post.content**
      * - `text` in database
      * - Nullable, no default
      */
      content: string | null;
      /**
      * **post.publisched**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      publisched: boolean;
      /**
      * **post.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      createdAt: db.TimestampTzString;
      /**
      * **post.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updatedAt: db.TimestampTzString;
      /**
      * **post.authorId**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      authorId: string;
    }
    export interface Whereable {
      /**
      * **post.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **post.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **post.content**
      * - `text` in database
      * - Nullable, no default
      */
      content?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **post.publisched**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      publisched?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **post.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **post.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **post.authorId**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      authorId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **post.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **post.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **post.content**
      * - `text` in database
      * - Nullable, no default
      */
      content?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **post.publisched**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      publisched?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **post.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **post.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updatedAt: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **post.authorId**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      authorId: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **post.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **post.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **post.content**
      * - `text` in database
      * - Nullable, no default
      */
      content?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **post.publisched**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      publisched?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **post.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **post.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **post.authorId**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      authorId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'post_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **profile**
   * - Table in database
   */
  export namespace profile {
    export type Table = 'profile';
    export interface Selectable {
      /**
      * **profile.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **profile.bio**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      bio: string;
      /**
      * **profile.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      createdAt: Date;
      /**
      * **profile.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updatedAt: Date;
      /**
      * **profile.userId**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      userId: string;
    }
    export interface JSONSelectable {
      /**
      * **profile.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **profile.bio**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      bio: string;
      /**
      * **profile.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      createdAt: db.TimestampTzString;
      /**
      * **profile.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updatedAt: db.TimestampTzString;
      /**
      * **profile.userId**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      userId: string;
    }
    export interface Whereable {
      /**
      * **profile.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **profile.bio**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      bio?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **profile.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **profile.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **profile.userId**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      userId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **profile.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **profile.bio**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      bio: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **profile.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **profile.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updatedAt: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **profile.userId**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      userId: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **profile.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **profile.bio**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      bio?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **profile.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **profile.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **profile.userId**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      userId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'profile_pkey' | 'profile_userid_unique';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **user**
   * - Table in database
   */
  export namespace user {
    export type Table = 'user';
    export interface Selectable {
      /**
      * **user.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **user.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **user.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **user.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password: string;
      /**
      * **user.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      createdAt: Date;
      /**
      * **user.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updatedAt: Date;
    }
    export interface JSONSelectable {
      /**
      * **user.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **user.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **user.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **user.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password: string;
      /**
      * **user.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      createdAt: db.TimestampTzString;
      /**
      * **user.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updatedAt: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **user.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **user.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **user.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updatedAt: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **user.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **user.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'user_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* --- aggregate types --- */

  export namespace public {  
    export type Table = post.Table | profile.Table | user.Table;
    export type Selectable = post.Selectable | profile.Selectable | user.Selectable;
    export type JSONSelectable = post.JSONSelectable | profile.JSONSelectable | user.JSONSelectable;
    export type Whereable = post.Whereable | profile.Whereable | user.Whereable;
    export type Insertable = post.Insertable | profile.Insertable | user.Insertable;
    export type Updatable = post.Updatable | profile.Updatable | user.Updatable;
    export type UniqueIndex = post.UniqueIndex | profile.UniqueIndex | user.UniqueIndex;
    export type Column = post.Column | profile.Column | user.Column;
  
    export type AllBaseTables = [post.Table, profile.Table, user.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [post.Table, profile.Table, user.Table];
  }



  /* === global aggregate types === */

  export type Schema = 'public';
  export type Table = public.Table;
  export type Selectable = public.Selectable;
  export type JSONSelectable = public.JSONSelectable;
  export type Whereable = public.Whereable;
  export type Insertable = public.Insertable;
  export type Updatable = public.Updatable;
  export type UniqueIndex = public.UniqueIndex;
  export type Column = public.Column;

  export type AllSchemas = ['public'];
  export type AllBaseTables = [...public.AllBaseTables];
  export type AllForeignTables = [...public.AllForeignTables];
  export type AllViews = [...public.AllViews];
  export type AllMaterializedViews = [...public.AllMaterializedViews];
  export type AllTablesAndViews = [...public.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "post": post.Selectable;
    "profile": profile.Selectable;
    "user": user.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "post": post.JSONSelectable;
    "profile": profile.JSONSelectable;
    "user": user.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "post": post.Whereable;
    "profile": profile.Whereable;
    "user": user.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "post": post.Insertable;
    "profile": profile.Insertable;
    "user": user.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "post": post.Updatable;
    "profile": profile.Updatable;
    "user": user.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "post": post.UniqueIndex;
    "profile": profile.UniqueIndex;
    "user": user.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "post": post.Column;
    "profile": profile.Column;
    "user": user.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "post": post.SQL;
    "profile": profile.SQL;
    "user": user.SQL;
  }[T];

}
